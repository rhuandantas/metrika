// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/sqlite.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/sqlite.go -destination=internal/mocks/repository/mock_repository.go -package=mock_repo
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"

	models "github.com/rhuandantas/metrika/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockRepository) Init(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockRepositoryMockRecorder) Init(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockRepository)(nil).Init), ctx)
}

// LoadMetrics mocks base method.
func (m *MockRepository) LoadMetrics(ctx context.Context) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadMetrics", ctx)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadMetrics indicates an expected call of LoadMetrics.
func (mr *MockRepositoryMockRecorder) LoadMetrics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMetrics", reflect.TypeOf((*MockRepository)(nil).LoadMetrics), ctx)
}

// SaveMetrics mocks base method.
func (m *MockRepository) SaveMetrics(ctx context.Context, metrics models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMetrics", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMetrics indicates an expected call of SaveMetrics.
func (mr *MockRepositoryMockRecorder) SaveMetrics(ctx, metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMetrics", reflect.TypeOf((*MockRepository)(nil).SaveMetrics), ctx, metrics)
}
